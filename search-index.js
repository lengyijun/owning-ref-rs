var searchIndex = JSON.parse('{\
"owning_ref":{"doc":"An owning reference.","i":[[8,"StableAddress","owning_ref","An unsafe marker trait for types that deref to a stable…",null,null],[8,"CloneStableAddress","","An unsafe marker trait for types where clones deref to the…",null,null],[3,"OwningRef","","An owning reference.",null,null],[3,"OwningRefMut","","An mutable owning reference.",null,null],[3,"OwningHandle","","`OwningHandle` is a complement to `OwningRef`. Where…",null,null],[6,"BoxRef","","Typedef of a owning reference that uses a `Box` as the…",null,null],[6,"VecRef","","Typedef of a owning reference that uses a `Vec` as the…",null,null],[6,"StringRef","","Typedef of a owning reference that uses a `String` as the…",null,null],[6,"RcRef","","Typedef of a owning reference that uses a `Rc` as the owner.",null,null],[6,"ArcRef","","Typedef of a owning reference that uses a `Arc` as the…",null,null],[6,"RefRef","","Typedef of a owning reference that uses a `Ref` as the…",null,null],[6,"RefMutRef","","Typedef of a owning reference that uses a `RefMut` as the…",null,null],[6,"MutexGuardRef","","Typedef of a owning reference that uses a `MutexGuard` as…",null,null],[6,"RwLockReadGuardRef","","Typedef of a owning reference that uses a…",null,null],[6,"RwLockWriteGuardRef","","Typedef of a owning reference that uses a…",null,null],[6,"BoxRefMut","","Typedef of a mutable owning reference that uses a `Box` as…",null,null],[6,"VecRefMut","","Typedef of a mutable owning reference that uses a `Vec` as…",null,null],[6,"StringRefMut","","Typedef of a mutable owning reference that uses a `String`…",null,null],[6,"RefMutRefMut","","Typedef of a mutable owning reference that uses a `RefMut`…",null,null],[6,"MutexGuardRefMut","","Typedef of a mutable owning reference that uses a…",null,null],[6,"RwLockWriteGuardRefMut","","Typedef of a mutable owning reference that uses a…",null,null],[6,"ErasedBoxRef","","Typedef of a owning reference that uses an erased `Box` as…",null,null],[6,"ErasedRcRef","","Typedef of a owning reference that uses an erased `Rc` as…",null,null],[6,"ErasedArcRef","","Typedef of a owning reference that uses an erased `Arc` as…",null,null],[6,"ErasedBoxRefMut","","Typedef of a mutable owning reference that uses an erased…",null,null],[8,"Erased","","Helper trait for an erased concrete type an owner…",null,null],[8,"IntoErased","","Helper trait for erasing the concrete type of what an…",null,null],[16,"Erased","","Owner with the dereference type substituted to `Erased`.",0,null],[10,"into_erased","","Perform the type erasure.",0,[[]]],[8,"ToHandle","","Trait to implement the conversion of owner to handle for…",null,null],[16,"Handle","","The type of handle to be encapsulated by the OwningHandle.",1,null],[10,"to_handle","","Given an appropriately-long-lived pointer to ourselves,…",1,[[]]],[8,"ToHandleMut","","Trait to implement the conversion of owner to mutable…",null,null],[16,"HandleMut","","The type of handle to be encapsulated by the OwningHandle.",2,null],[10,"to_handle_mut","","Given an appropriately-long-lived pointer to ourselves,…",2,[[]]],[11,"new","","Creates a new owning reference from a owner initialized to…",3,[[]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the…",3,[[]]],[11,"map","","Converts `self` into a new owning reference that points at…",3,[[],[["sized",8],["owningref",3]]]],[11,"map_with_owner","","Converts `self` into a new owning reference that points at…",3,[[],[["sized",8],["owningref",3]]]],[11,"try_map","","Tries to convert `self` into a new owning reference that…",3,[[],[["result",4],["owningref",3]]]],[11,"try_map_with_owner","","Tries to convert `self` into a new owning reference that…",3,[[],[["result",4],["owningref",3]]]],[11,"map_owner","","Converts `self` into a new owning reference with a…",3,[[],["owningref",3]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the…",3,[[],[["owningref",3],["box",3]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait…",3,[[],["owningref",3]]],[11,"as_owner","","A reference to the underlying owner.",3,[[]]],[11,"into_owner","","Discards the reference and retrieves the owner.",3,[[]]],[11,"new","","Creates a new owning reference from a owner initialized to…",4,[[]]],[11,"new_assert_stable_address","","Like `new`, but doesn’t require `O` to implement the…",4,[[]]],[11,"map","","Converts `self` into a new shared owning reference that…",4,[[],[["sized",8],["owningref",3]]]],[11,"map_mut","","Converts `self` into a new mutable owning reference that…",4,[[],[["sized",8],["owningrefmut",3]]]],[11,"try_map","","Tries to convert `self` into a new shared owning reference…",4,[[],[["result",4],["owningref",3]]]],[11,"try_map_mut","","Tries to convert `self` into a new mutable owning…",4,[[],[["result",4],["owningrefmut",3]]]],[11,"map_owner","","Converts `self` into a new owning reference with a…",4,[[],["owningrefmut",3]]],[11,"map_owner_box","","Converts `self` into a new owning reference where the…",4,[[],[["owningrefmut",3],["box",3]]]],[11,"erase_owner","","Erases the concrete base type of the owner with a trait…",4,[[],["owningrefmut",3]]],[11,"as_owner","","A reference to the underlying owner.",4,[[]]],[11,"as_owner_mut","","A mutable reference to the underlying owner.",4,[[]]],[11,"into_owner","","Discards the reference and retrieves the owner.",4,[[]]],[11,"new","","Create a new `OwningHandle` for a type that implements…",5,[[]]],[11,"new_mut","","Create a new mutable `OwningHandle` for a type that…",5,[[]]],[11,"new_with_fn","","Create a new OwningHandle. The provided callback will be…",5,[[]]],[11,"try_new","","Create a new OwningHandle. The provided callback will be…",5,[[],["result",4]]],[11,"as_owner","","A getter for the underlying owner.",5,[[]]],[11,"into_owner","","Discards the dependent object and returns the owner.",5,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"as_mut","","",4,[[]]],[11,"as_ref","","",3,[[]]],[11,"as_ref","","",4,[[]]],[11,"from","","",3,[[]]],[11,"from","","",4,[[]]],[11,"from","","",3,[[["owningrefmut",3]]]],[11,"clone","","",3,[[]]],[11,"cmp","","",3,[[],["ordering",4]]],[11,"cmp","","",4,[[],["ordering",4]]],[11,"eq","","",3,[[]]],[11,"eq","","",4,[[]]],[11,"partial_cmp","","",3,[[],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",4,[[],[["ordering",4],["option",4]]]],[11,"deref","","",5,[[]]],[11,"deref","","",3,[[]]],[11,"deref","","",4,[[]]],[11,"deref_mut","","",5,[[]]],[11,"deref_mut","","",4,[[]]],[11,"fmt","","",3,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",4,[[["formatter",3]],[["result",4],["error",3]]]],[11,"fmt","","",6,[[["formatter",3]],[["result",4],["error",3]]]],[11,"hash","","",3,[[]]],[11,"hash","","",4,[[]]],[11,"borrow","","",3,[[]]]],"p":[[8,"IntoErased"],[8,"ToHandle"],[8,"ToHandleMut"],[3,"OwningRef"],[3,"OwningRefMut"],[3,"OwningHandle"],[8,"Erased"]]},\
"stable_deref_trait":{"doc":"This module defines an unsafe marker trait, StableDeref,…","i":[[8,"StableDeref","stable_deref_trait","An unsafe marker trait for types that deref to a stable…",null,null],[8,"CloneStableDeref","","An unsafe marker trait for types where clones deref to the…",null,null]],"p":[]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);